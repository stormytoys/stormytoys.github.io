<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Milker Project Log</title>
    <link>http://stormytoys.github.io/post/</link>
    <description>Recent content in Posts on Milker Project Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Jun 2016 19:58:48 +0100</lastBuildDate>
    <atom:link href="http://stormytoys.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Controller</title>
      <link>http://stormytoys.github.io/post/controller/</link>
      <pubDate>Fri, 17 Jun 2016 19:58:48 +0100</pubDate>
      
      <guid>http://stormytoys.github.io/post/controller/</guid>
      <description>&lt;p&gt;So while waiting for the power supply and solinoid driver modules decided to make a start on the initial computer controller.
So for the initial proof of concept decided to go with a arduino uno since I have it on hand. Although for the final version I am considering
an Arduino 101 since its a bigger micro and had bluetooth low energy built in, or I may go with arm based arduino with a bluetooth low energy module.&lt;/p&gt;

&lt;p&gt;So first of all a video&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//player.vimeo.com/video/171140263&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;So the video shows a demo of the control code which is currently driving a LED for demo purposes. At the moment
during protoype phase a command line is used however for the bluetooth version I am looking in to creating a basic application for a tablet or pc.&lt;/p&gt;

&lt;p&gt;The code is self is &lt;a href=&#34;https://github.com/stormytoys/milker&#34;&gt;on github&lt;/a&gt;. The arduino code is free of using any delay code and instead
uses millis() on each run and gets the time in millis between the current time and the last time a new command was ran. This gets the time in milliseconds
which is then checked against the sent command delay time. If the delay time is reached the next command is ran until it gets to the end, then it loops back to the first command.&lt;/p&gt;

&lt;p&gt;The first command sent in the video is &amp;lsquo;I&amp;rsquo; to tell the controller to go in to input mode&lt;/p&gt;

&lt;p&gt;Then folled by the main commands which is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C1,10,2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the C part is to tell the micro it is a command. The first number is to say if the solenoid should be opened 0 for closed and 1 for opened
followed by the time delay after the first comma then after the second comma is a value to specify what type of time delay the command has
which can be 1for milliseconds, 2 for seconds or 3 for minuets&lt;/p&gt;

&lt;p&gt;The final command is &amp;lsquo;F&amp;rsquo; which tells the controller to loop through the pattern.&lt;/p&gt;

&lt;p&gt;Again this is not the final code and I will probably simplify things if I use a micro with more ram where only the milliseconds is sent as the delay.&lt;/p&gt;

&lt;p&gt;So hopefully I can build the first prototype with the solenoid in place and confirm the solenoid is at lest working.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>start</title>
      <link>http://stormytoys.github.io/post/start/</link>
      <pubDate>Sun, 12 Jun 2016 15:07:43 +0100</pubDate>
      
      <guid>http://stormytoys.github.io/post/start/</guid>
      <description>

&lt;h1 id=&#34;start&#34;&gt;Start&lt;/h1&gt;

&lt;p&gt;As the milker will be a project over many weeks decided to create a project log site with the aim of documenting progress and getting the word out there.
As I make progress on the site I will post updates hopefully on a weekly bases explaining where I am with things. Hopefully this will attract some attention from the community at large, and that hopefully means maybe getting some people on board with specific skills sets.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;For the milker I have decided to go with a vacuum type miler in a similar way of how a cow milking machine works. With one key difference to most DIY machines which is the pulsator will be electronically controlled.
meaning that the stroke length and speed can be varied on the fly achieving patterns rather than simple speed control. I will also be investigating making the vacuum strength variable by electronic means as well.&lt;/p&gt;

&lt;p&gt;How a this type of machine is best explained with the image shown below:
&lt;img src=&#34;http://stormytoys.github.io/images/start/inflsc.jpg&#34; alt=&#34;Milker&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;pulsator&#34;&gt;Pulsator&lt;/h2&gt;

&lt;p&gt;For the pulsator I have gone with the following &lt;a href=&#34;http://stormytoys.github.io/images/start/valve.jpg&#34;&gt;Solenoid Valve&lt;/a&gt;. The valve it self is 3 way where I can expose the service end to either vacuum when open or normal air pressure when closed.
As the valve is electronically controlled I can vary the time between vacuum and normal air pressure through a programmed pattern rather than speed control.&lt;/p&gt;

&lt;h2 id=&#34;control&#34;&gt;Control&lt;/h2&gt;

&lt;p&gt;So for the control going with a predictable Arduino with an avr chip. Although this may change in the future depending on what features I want say Bluetooth lte or wifi.
For the moment going to be going with the commands sent over serial saved in to the micro controller for execution &lt;a href=&#34;https://www.arduino.cc/en/Tutorial/BlinkWithoutDelay&#34;&gt;without using any delay code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I do have some code for this however I either have a broken Arduino, Broken usb port on computer or Windows 10 is a bit funny. So going to try it on a alternative computer with linux goodness and get back to you on the code it self.
In theory the code works well compiles so that is the first hurdle. Next hurdle is debugging fun when its on a MCU.&lt;/p&gt;

&lt;h2 id=&#34;milker-receiver&#34;&gt;Milker Receiver&lt;/h2&gt;

&lt;p&gt;So not decided on what I am doing with this yet. The two options so far are get a serious kit &lt;a href=&#34;http://www.seriouskit.com/&#34;&gt;SPT&lt;/a&gt; or get/build my own.
I have sent an email to serious kit although got no reply as of this post. Although if I do go with DIY/get one built I would have no issues/guilt on releasing something commercial in the future.
For the moment I will cross that bridge at a later date as there is a lot more I can be getting on with before that stage.&lt;/p&gt;

&lt;h2 id=&#34;help-which-would-be-nice&#34;&gt;Help which would be nice&lt;/h2&gt;

&lt;p&gt;In short the help I am most likely going to need at the moment is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Figuring out a way of controlling vacumme strengh electronically. Anyone got any experiance/ideas feel fee to contact me&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Milker Receiver as I not got the means to build a nice one at the moment and would love an aesthetically pleasing receiver.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However I would certainly expect there are things I havent even thought off.&lt;/p&gt;

&lt;p&gt;My method of contact at the moment is through my &lt;a href=&#34;https://fetlife.com/users/1357083&#34;&gt;profile&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>